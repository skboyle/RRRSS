{"ast":null,"code":"function FormatDate(dateString) {\n  // Parse the date string into a Date object\n  const date = new Date(dateString);\n\n  // Check if the parsed date is valid\n  if (isNaN(date.getTime())) {\n    // If the date is invalid, return an empty string\n    console.error('Invalid date string:', dateString);\n    return '';\n  }\n\n  // Extract the month, day, and year components\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  const year = date.getFullYear();\n\n  // Format the date components into mm/dd/yyyy format\n  return `${month}/${day}/${year}`;\n}\n_c = FormatDate;\nexport default FormatDate;\nvar _c;\n$RefreshReg$(_c, \"FormatDate\");","map":{"version":3,"names":["FormatDate","dateString","date","Date","isNaN","getTime","console","error","month","String","getMonth","padStart","day","getDate","year","getFullYear","_c","$RefreshReg$"],"sources":["/Users/stevie/Desktop/Code/RRRSS/src/components/FormatDate.jsx"],"sourcesContent":["function FormatDate(dateString) {\n  // Parse the date string into a Date object\n  const date = new Date(dateString);\n    \n  // Check if the parsed date is valid\n  if (isNaN(date.getTime())) {\n    // If the date is invalid, return an empty string\n    console.error('Invalid date string:', dateString);\n    return '';\n  }\n\n  // Extract the month, day, and year components\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  const year = date.getFullYear();\n\n  // Format the date components into mm/dd/yyyy format\n  return `${month}/${day}/${year}`;\n}\n\nexport default FormatDate;"],"mappings":"AAAA,SAASA,UAAUA,CAACC,UAAU,EAAE;EAC9B;EACA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;;EAEjC;EACA,IAAIG,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE;IACzB;IACAC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEN,UAAU,CAAC;IACjD,OAAO,EAAE;EACX;;EAEA;EACA,MAAMO,KAAK,GAAGC,MAAM,CAACP,IAAI,CAACQ,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC1D,MAAMC,GAAG,GAAGH,MAAM,CAACP,IAAI,CAACW,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACnD,MAAMG,IAAI,GAAGZ,IAAI,CAACa,WAAW,CAAC,CAAC;;EAE/B;EACA,OAAQ,GAAEP,KAAM,IAAGI,GAAI,IAAGE,IAAK,EAAC;AAClC;AAACE,EAAA,GAlBQhB,UAAU;AAoBnB,eAAeA,UAAU;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
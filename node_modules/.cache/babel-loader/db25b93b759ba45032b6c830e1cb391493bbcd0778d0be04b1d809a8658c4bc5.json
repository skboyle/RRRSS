{"ast":null,"code":"export const fetchItems = async () => {\n  try {\n    const response = await fetch('http://localhost:3001/feed_items', {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch items');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching items:', error);\n    throw error;\n  }\n};\nexport const fetchItemDetails = async id => {\n  try {\n    const response = await fetch(`http://localhost:3001/feed_items/${id}`, {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch item details');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching item details:', error);\n    throw error;\n  }\n};\nexport const updateItemReadStatus = async (id, readStatus, callback) => {\n  try {\n    console.log(readStatus);\n    const url = `http://localhost:3001/feed_items/${id}`;\n    const body = JSON.stringify({\n      read: readStatus\n    });\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    console.log('Update request:', {\n      method: 'PATCH',\n      url,\n      headers,\n      body\n    });\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers,\n      body\n    });\n    console.log('Response status:', response.status);\n    console.log('Response:', response);\n    if (!response.ok) {\n      throw new Error('Error updating item read status');\n    }\n    callback();\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error updating item read status:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["fetchItems","response","fetch","method","mode","headers","ok","Error","data","json","error","console","fetchItemDetails","id","updateItemReadStatus","readStatus","callback","log","url","body","JSON","stringify","read","status"],"sources":["/Users/stevie/Desktop/Code/RRRSS/src/services/api.ts"],"sourcesContent":["export const fetchItems = async () => {\n    try {\n        const response = await fetch('http://localhost:3001/feed_items', {\n            method: \"GET\",\n            mode: \"cors\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to fetch items');\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error fetching items:', error);\n        throw error;\n    }\n}\n\nexport const fetchItemDetails = async (id: string) => {\n    try {\n        const response = await fetch(`http://localhost:3001/feed_items/${id}`, {\n            method: \"GET\",\n            mode: \"cors\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to fetch item details');\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error fetching item details:', error);\n        throw error;\n    }\n};\n\n\nexport const updateItemReadStatus = async (id: string, readStatus: string, callback: () => void) => {\n    try {\n        console.log(readStatus)\n        const url = `http://localhost:3001/feed_items/${id}`;\n        const body = JSON.stringify({ read: readStatus });\n        const headers = {\n            'Content-Type': 'application/json',\n        };\n\n        console.log('Update request:', {\n            method: 'PATCH',\n            url,\n            headers,\n            body,\n        });\n\n        const response = await fetch(url, {\n            method: 'PATCH',\n            headers,\n            body,\n        });\n\n        console.log('Response status:', response.status);\n        console.log('Response:', response);\n\n\n        if (!response.ok) {\n            throw new Error('Error updating item read status');\n        }\n        \n        callback();\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error updating item read status:', error);\n        throw error;\n    }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;MAC7DC,MAAM,EAAE,KAAK;MACbC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC5C;IACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAG,MAAOC,EAAU,IAAK;EAClD,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAE,oCAAmCW,EAAG,EAAC,EAAE;MACnEV,MAAM,EAAE,KAAK;MACbC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACnD;IACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACf;AACJ,CAAC;AAGD,OAAO,MAAMI,oBAAoB,GAAG,MAAAA,CAAOD,EAAU,EAAEE,UAAkB,EAAEC,QAAoB,KAAK;EAChG,IAAI;IACAL,OAAO,CAACM,GAAG,CAACF,UAAU,CAAC;IACvB,MAAMG,GAAG,GAAI,oCAAmCL,EAAG,EAAC;IACpD,MAAMM,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;MAAEC,IAAI,EAAEP;IAAW,CAAC,CAAC;IACjD,MAAMV,OAAO,GAAG;MACZ,cAAc,EAAE;IACpB,CAAC;IAEDM,OAAO,CAACM,GAAG,CAAC,iBAAiB,EAAE;MAC3Bd,MAAM,EAAE,OAAO;MACfe,GAAG;MACHb,OAAO;MACPc;IACJ,CAAC,CAAC;IAEF,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAACgB,GAAG,EAAE;MAC9Bf,MAAM,EAAE,OAAO;MACfE,OAAO;MACPc;IACJ,CAAC,CAAC;IAEFR,OAAO,CAACM,GAAG,CAAC,kBAAkB,EAAEhB,QAAQ,CAACsB,MAAM,CAAC;IAChDZ,OAAO,CAACM,GAAG,CAAC,WAAW,EAAEhB,QAAQ,CAAC;IAGlC,IAAI,CAACA,QAAQ,CAACK,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;IACtD;IAEAS,QAAQ,CAAC,CAAC;IAEV,MAAMR,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}